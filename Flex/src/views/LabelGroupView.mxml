<?xml version="1.0"?>
<s:Group
		xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark">

	<fx:Script><![CDATA[
		import com.greensock.TimelineLite;
		import com.greensock.TweenLite;

		import mx.core.IVisualElement;

		import spark.components.Label;
		import spark.core.SpriteVisualElement;

		public static const TEST_OBJECT_COUNT:int = 5000;

		protected static const TWEEN_PAN_DURATION:int = 2;

		protected static const TWEEN_PAN_DURATION_LOG:String = " (" + String(TWEEN_PAN_DURATION * 2) + " second tween)";

		protected static const TWEEN_SCALE_DURATION:int = 1;

		protected static const TWEEN_SCALE_DURATION_LOG:String = " (" + String(TWEEN_SCALE_DURATION * 4) + " second tween)";

		protected var addedCount:int;

		protected var addingStartTime:Date;

		protected var labelList:Array = [];

		public var logView:LogView;

		protected var panSequence:TimelineLite;

		protected var scaleSequence:TimelineLite;
		private var bitmapData:BitmapData;

		public function createBitmapLabels():void {
			logView.logLabel.text = "";
			var startTime:Date = new Date();
			var i:int;
			var count:int = TEST_OBJECT_COUNT;
			var textField:TextField = new TextField();
			bitmapData = new BitmapData(760, 460, true);
			for (i = 0; i < count; i++) {
				textField.text = "This is label " + String(i);
				bitmapData.draw(textField, new Matrix(1, 0, 0, 1, Math.random() * 760, Math.random() * 460));
			}
			var element:SpriteVisualElement = new SpriteVisualElement();
			element.addChild(new Bitmap(bitmapData));

			this.addElement(element);
			logView.logActionTime(startTime, "CREATING Bitmaps");
			addingStartTime = new Date();
			addingComplete();
		}

		public function createFlashLabels():void {
			logView.logLabel.text = "";
			var startTime:Date = new Date();
			var i:int;
			var count:int = TEST_OBJECT_COUNT;
			for (i = 0; i < count; i++) {
				var textField:TextField = new TextField();
				textField.text = "This is label " + String(i);

				var element:SpriteVisualElement = new SpriteVisualElement();
				element.x = Math.random() * 760;
				element.y = Math.random() * 460;
				element.addChild(textField);

				labelList.push(element);
			}
			logView.logActionTime(startTime, "CREATING Flash TextFields");

			callLater(addLabels);
		}

		public function createFlexLabels():void {
			logView.logLabel.text = "";
			var startTime:Date = new Date();
			var i:int;
			var count:int = TEST_OBJECT_COUNT;
			for (i = 0; i < count; i++) {
				var label:Label = new Label();
				label.x = Math.random() * 600;
				label.y = Math.random() * 400;
				label.text = "This is label " + String(i);
				labelList.push(label);
			}
			logView.logActionTime(startTime, "CREATING Flex Labels");

			callLater(addLabels);
		}

		protected function addLabels():void {
			addedCount = 0;
			addingStartTime = new Date();
			var i:int;
			var count:int = TEST_OBJECT_COUNT;
			for (i = 0; i < count; i++) {
				var label:IVisualElement = labelList[i];
				label.addEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);
				this.addElement(label);
			}
		}

		protected function handleAddedToStage(event:Event):void {
			var label:IVisualElement = event.currentTarget as IVisualElement;
			label.removeEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);
			addedCount++;

			if (addedCount == TEST_OBJECT_COUNT)
				callLater(addingComplete);
		}

		protected function addingComplete():void {
			logView.logActionTime(addingStartTime, "ADDING");

			callLater(panLabels);
		}

		protected function panLabels():void {
			suspendBackgroundProcessing();
			var startTime:Date = new Date();
			panSequence = new TimelineLite({onComplete: panComplete, onCompleteParams: [startTime]});
			panSequence.append(new TweenLite(this, TWEEN_PAN_DURATION, {x: "+800", y: "+400"}));
			panSequence.append(new TweenLite(this, TWEEN_PAN_DURATION, {x: "-800", y: "-400"}));
			panSequence.play();
		}

		protected function panComplete():void {
			logView.logActionTime(arguments[0], "PANNING" + TWEEN_PAN_DURATION_LOG);
			panSequence = null;
			resumeBackgroundProcessing();

			callLater(scaleLabels);
		}

		protected function scaleLabels():void {
			suspendBackgroundProcessing();
			var startTime:Date = new Date();
			scaleSequence = new TimelineLite({onComplete: scaleComplete, onCompleteParams: [startTime]});
			scaleSequence.append(new TweenLite(this, TWEEN_SCALE_DURATION, {scaleX: "-0.9", scaleY: "-0.9"}));
			scaleSequence.append(new TweenLite(this, TWEEN_SCALE_DURATION, {scaleX: "+0.9", scaleY: "+0.9"}));
			scaleSequence.append(new TweenLite(this, TWEEN_SCALE_DURATION, {scaleX: "+1.0", scaleY: "+1.0"}));
			scaleSequence.append(new TweenLite(this, TWEEN_SCALE_DURATION, {scaleX: "-1.0", scaleY: "-1.0"}));
			scaleSequence.play();
		}

		protected function scaleComplete():void {
			logView.logActionTime(arguments[0], "SCALING" + TWEEN_SCALE_DURATION_LOG);
			scaleSequence = null;
			resumeBackgroundProcessing();

			callLater(destroyLabels);
		}

		protected function destroyLabels():void {
			var startTime:Date = new Date();
			this.removeAllElements();
			logView.logActionTime(startTime, "DESTROYING");
			if (bitmapData) {
				bitmapData.dispose();
			}
			System.gc();
		}
		]]></fx:Script>

</s:Group>
