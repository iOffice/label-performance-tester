<?xml version="1.0"?>
<s:Group
		xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark">

	<fx:Script><![CDATA[
		import com.greensock.TimelineLite;
		import com.greensock.TweenLite;

		import mx.core.IVisualElement;

		import spark.components.Label;
		import spark.core.SpriteVisualElement;

		public static const TEST_OBJECT_COUNT:int = 10000;

		private var addedCount:int;

		private var addingStartTime:Date;

		private var labelList:Array = [];

		public var logView:LogView;

		private var panSequence:TimelineLite;

		private var scaleSequence:TimelineLite;

		private function resetBitmapMatrix():void {
			var matrix:Matrix = this.transform.concatenatedMatrix;
			this.cacheAsBitmapMatrix = matrix;
		}

		public function createBitmapLabels():void {
			logView.logLabel.text = "";
			var startTime:Date = new Date();
			var i:int;
			var count:int = TEST_OBJECT_COUNT;
			for (i = 0; i < count; i++) {
				var textField:TextField = new TextField();
				textField.text = "This is label " + String(i);

				var bitmapData:BitmapData = new BitmapData(textField.width, textField.height);
				bitmapData.draw(textField);
				var bitmap:Bitmap = new Bitmap(bitmapData);

				var element:SpriteVisualElement = new SpriteVisualElement();
				element.x = Math.random() * 760;
				element.y = Math.random() * 460;
				element.addChild(bitmap);

				labelList.push(element);
			}
			logView.logActionTime(startTime, "CREATING Bitmaps");

			callLater(addLabels);
		}

		public function createFlashLabels():void {
			logView.logLabel.text = "";
			var startTime:Date = new Date();
			var i:int;
			var count:int = TEST_OBJECT_COUNT;
			for (i = 0; i < count; i++) {
				var textField:TextField = new TextField();
				textField.text = "This is label " + String(i);

				var element:SpriteVisualElement = new SpriteVisualElement();
				element.x = Math.random() * 760;
				element.y = Math.random() * 460;
				element.addChild(textField);

				labelList.push(element);
			}
			logView.logActionTime(startTime, "CREATING Flash TextFields");

			callLater(addLabels);
		}

		public function createFlexLabels():void {
			logView.logLabel.text = "";
			var startTime:Date = new Date();
			var i:int;
			var count:int = TEST_OBJECT_COUNT;
			for (i = 0; i < count; i++) {
				var label:Label = new Label();
				label.x = Math.random() * 600;
				label.y = Math.random() * 400;
				label.text = "This is label " + String(i);
				labelList.push(label);
			}
			logView.logActionTime(startTime, "CREATING Flex Labels");

			callLater(addLabels);
		}

		private function addLabels():void {
			addedCount = 0;
			addingStartTime = new Date();
			var i:int;
			var count:int = TEST_OBJECT_COUNT;
			for (i = 0; i < count; i++) {
				var label:IVisualElement = labelList[i];
				label.addEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);
				this.addElement(label);
			}
		}

		private function handleAddedToStage(event:Event):void {
			var label:IVisualElement = event.currentTarget as IVisualElement;
			label.removeEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);
			addedCount++;

			if (addedCount == TEST_OBJECT_COUNT)
				callLater(addingComplete);
		}

		private function addingComplete():void {
			resetBitmapMatrix();
			logView.logActionTime(addingStartTime, "ADDING");

			callLater(panLabels);
		}

		private function panLabels():void {
			suspendBackgroundProcessing();
			var startTime:Date = new Date();
			panSequence = new TimelineLite({onComplete: panComplete, onCompleteParams: [startTime]});
			panSequence.append(new TweenLite(this, 2, {x: "800", y: "400"}));
			panSequence.append(new TweenLite(this, 2, {x: "-800", y: "-400"}));
			panSequence.play();
		}

		private function panComplete():void {
			logView.logActionTime(arguments[0], "PANNING");
			panSequence = null;
			resumeBackgroundProcessing();

			callLater(scaleLabels);
		}

		private function scaleLabels():void {
			suspendBackgroundProcessing();
			var startTime:Date = new Date();
			scaleSequence = new TimelineLite({onComplete: scaleComplete, onCompleteParams: [startTime]});
			scaleSequence.append(new TweenLite(this, 2, {scaleX: "-0.9", scaleY: "-0.9"}));
			scaleSequence.append(new TweenLite(this, 2, {scaleX: "0.9", scaleY: "0.9"}));
			scaleSequence.play();
		}

		private function scaleComplete():void {
			logView.logActionTime(arguments[0], "SCALING");
			scaleSequence = null;
			resumeBackgroundProcessing();

			callLater(destroyLabels);
		}

		private function destroyLabels():void {
			var startTime:Date = new Date();
			var i:int;
			var count:int = labelList.length;
			for (i = 0; i < count; i++) {
				this.removeElement(labelList.shift());
			}
			logView.logActionTime(startTime, "DESTROYING");
		}
		]]></fx:Script>

</s:Group>
